{"version":3,"sources":["../../../inline/graph-donut/graph-donut.ts"],"names":[],"mappings":"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","file":"graph-donut.js","sourceRoot":"","sourcesContent":["//const CountUp = require('countUp.js');\n\nimport {Component, Input, OnInit} from '@angular/core';\n\n\nconst SELECTOR: string = 'graph-donut';\n\n\n\n\nexport class GraphDonutComponent implements OnInit{\n  \n  percentage: number;\n\n  numPercent: number;\n\n  sideFlag: number;\n\n  coords: number[] = [0,0];\n  outerRadius = 50;\n\n  color: string = \"red\";\n\n  findArcAngle(): number{\n    return 360 * this.percentage;\n  }\n\n  findColor(){\n    if (this.percentage > .75){\n      this.color = \"green\";\n    }else if(this.percentage > .50){\n     this.color = \"yellow\";\n    }else{\n      this.color = \"red\";\n    }\n  }\n\n  findRelativeCoordinates(){\n\n    const alpha = this.findArcAngle();\n    this.findColor();\n\n\n    if(this.percentage <= .25){\n      this.coords[0] = this.outerRadius * Math.cos((90 - alpha)*Math.PI/180);\n      this.coords[1] = 50 - (this.outerRadius * Math.sin((90 - alpha)*Math.PI/180));\n      this.sideFlag = 0;\n    }else if(this.percentage <= .5){\n      this.coords[0] = this.outerRadius * Math.cos((alpha - 90)*Math.PI/180);\n      this.coords[1] = 50 + (this.outerRadius * Math.sin((alpha - 90)*Math.PI/180));\n      this.sideFlag = 0;\n    }else if(this.percentage <= .75){\n      this.coords[0] = -this.outerRadius * Math.cos((270 - alpha)*Math.PI/180);\n      this.coords[1] = 50 + (this.outerRadius * Math.sin((270 - alpha)*Math.PI/180));\n      this.sideFlag = 1;\n    }else{\n      this.coords[0] = -this.outerRadius * Math.cos((alpha - 270)*Math.PI/180);\n      this.coords[1] = 50 - (this.outerRadius * Math.sin((alpha - 270)*Math.PI/180));\n      this.sideFlag = 1;\n    }\n\n  }\n\n  ngOnInit(){\n    this.numPercent = Math.round(this.percentage * 100);\n    this.findRelativeCoordinates();\n  }\n\n\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: SELECTOR,\n  template: `\n    <svg width=\"120\" height=\"120\" >\n\n      <defs>\n        <mask id=\"circleMask\" x=\"0\" y=\"0\" width=\"120\" height=\"120\">\n          <circle cx=\"60\" cy=\"60\" [attr.r]=\"outerRadius\" style=\"fill:#ffffff;\" />\n          <circle cx=\"60\" cy=\"60\" [attr.r]=\"outerRadius - 10\" style=\"fill:#000000;\" />\n        </mask>\n      </defs>\n\n\n      <circle cx=\"60\" cy=\"60\" [attr.r]=\"outerRadius - 5\" style=\"fill:#DDDDDD;\"></circle>\n      <path *ngIf=\"percentage < 1\" id=\"Ring\" [attr.d]=\"'M 60 60 l 0 -'+ outerRadius +' a ' + outerRadius + ' ' + outerRadius +  ' 0 '+ sideFlag +' 1 ' + coords[0] + ' ' + coords[1] + ' z'\"\n            [attr.fill]=\"color\" style=\"mask: url(#circleMask);\"/>\n      <circle *ngIf=\"percentage >= 1\" cx=\"60\" cy=\"60\" [attr.r]=\"outerRadius\" [attr.fill]=\"color\" style=\"mask: url(#circleMask);\"/>\n      <text x=\"60\" y=\"63\" text-anchor=\"middle\" alignment-baseline=\"middle\" style=\"font-family: Arial; font-size: 180%\">{{numPercent}}%</text>\n\n    </svg>\n  `,\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'percentage': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}